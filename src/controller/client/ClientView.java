package controller.client;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import controller.auth.LoginView;
import controller.checkout.CheckoutView;
import model.booking.Booking;
import model.parking.ParkingLot;
import model.parking.ParkingSpace;
import model.user.Credentials;
import model.user.User;
import services.ClientServices;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.util.List;


public class ClientView extends javax.swing.JFrame {

    DefaultTableModel spaceModel = new DefaultTableModel();
    private User currentUser;
    // Variables declaration - do not modify
    private javax.swing.JTable bookingTable;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton checkoutBtn;
    private javax.swing.JComboBox<String> endTime;
    private javax.swing.JButton extendBtn;
    private javax.swing.Box.Filler filler1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField licenceTf;
    private javax.swing.JComboBox<String> locationTf;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTable spaceTable;
    private javax.swing.JComboBox<String> startTime;
    private javax.swing.JButton viewBtn;
    private javax.swing.JButton updateBookingBtn;
    private javax.swing.JButton checkOutBtn;
    /**
     * Creates new form ClientView
     */

    private Booking currentBooking;

    public ClientView(User user) {
        currentUser = user;
        initComponents();
        loadBookingTable();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientView(new User(new Credentials("rafd47@my.yorku.ca", "Rafd47@my.yorku.ca", "Student"))).setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        endTime = new JComboBox<String>();
        startTime = new JComboBox<String>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        logoutBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        extendBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        locationTf = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        spaceTable = new javax.swing.JTable();
        checkoutBtn = new javax.swing.JButton();
        licenceTf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        viewBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        String[] hours = new String[24];
        for (int i = 0; i < 24; i++) {
            String hourString = String.format("%02d:00", i);
            hours[i] = hourString;
            endTime.addItem(hourString);
            startTime.addItem(hourString);
        }

        updateBookingBtn = new javax.swing.JButton();
        checkOutBtn = new javax.swing.JButton();
        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("Sign Up with us!");
        List<String> locations = ClientServices.getInstance().getAllLocations();

        for (String item : locations) {
            locationTf.addItem(item);
        }
        locationTf.addActionListener(e -> {
            ParkingLot parkingLots = ClientServices.getInstance().getParkingLotByAddress((String) locationTf.getSelectedItem());
            loadSpaceTable(parkingLots);
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(0, 153, 153));
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("YU Parking System");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Welcome Back ClientView");

        jSeparator1.setBackground(new java.awt.Color(0, 153, 153));
        jSeparator1.setForeground(new java.awt.Color(0, 153, 153));

        jLabel4.setBackground(new java.awt.Color(0, 153, 153));
        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("New Booking");

        jSeparator2.setBackground(new java.awt.Color(0, 153, 153));
        jSeparator2.setForeground(new java.awt.Color(0, 153, 153));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setAlignmentX(1.0F);
        jSeparator2.setAlignmentY(1.0F);
        jSeparator2.setAutoscrolls(true);

        jLabel5.setBackground(new java.awt.Color(0, 153, 153));
        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 153));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Your Bookings");

        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "ID", "Space ID", "Vehicle", "Date", "Hours", "Cost"
                }
        ));
        jScrollPane1.setViewportView(bookingTable);

        logoutBtn.setBackground(new java.awt.Color(0, 153, 153));
        logoutBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        logoutBtn.setForeground(new java.awt.Color(255, 255, 255));
        logoutBtn.setText("Logout");
        logoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });


        updateBookingBtn.setBackground(new java.awt.Color(0, 153, 153));
        updateBookingBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateBookingBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateBookingBtn.setText("Update Booking");
        updateBookingBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateBookingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookingBtnActionPerformed(evt);
            }
        });

        checkOutBtn.setBackground(new java.awt.Color(0, 153, 153));
        checkOutBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkOutBtn.setForeground(new java.awt.Color(255, 255, 255));
        checkOutBtn.setText("Checkout!");
        checkOutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutBtnActionPerformed(evt);
            }
        });

        cancelBtn.setBackground(new java.awt.Color(0, 153, 153));
        cancelBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cancelBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelBtn.setText("Cancel Booking");
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        extendBtn.setBackground(new java.awt.Color(0, 153, 153));
        extendBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        extendBtn.setForeground(new java.awt.Color(255, 255, 255));
        extendBtn.setText("Extend Time");
        extendBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        extendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extendBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Select Date for Booking                                  ");


        spaceTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "ID", "Location", "Available"
                }
        ));
        jScrollPane2.setViewportView(spaceTable);

        checkoutBtn.setBackground(new java.awt.Color(0, 153, 153));
        checkoutBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkoutBtn.setForeground(new java.awt.Color(255, 255, 255));
        checkoutBtn.setText("Deposit!");
        checkoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });

        licenceTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenceTfActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Licence plate number");

        viewBtn.setBackground(new java.awt.Color(0, 153, 153));
        viewBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        viewBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewBtn.setText("View Details");
        viewBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Please Select Location Where you want to park!");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Start Time");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("End Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(110, 110, 110))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(116, 116, 116))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(36, 36, 36)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                        .addComponent(locationTf, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                .addGap(104, 104, 104))
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                        .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                        .addComponent(endTime, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                        .addComponent(licenceTf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel8)))))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addComponent(cancelBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(viewBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(extendBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(logoutBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(updateBookingBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(checkOutBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jSeparator1)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jSeparator2)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(50, 50, 50)
                                                                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(32, 32, 32)
                                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(18, 18, 18)
                                                                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(extendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(updateBookingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(checkOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(23, 23, 23))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(37, 37, 37)
                                                                .addComponent(jLabel9)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(locationTf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jLabel6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel10)
                                                                                        .addComponent(jLabel11))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(endTime, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                .addComponent(jLabel8)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(licenceTf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(22, 22, 22))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(false);
                new LoginView().setVisible(true);
            }
        });
    }


    private void updateBookingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookingBtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = bookingTable.getSelectedRow();
        int selectedBooking = 0;
        if (selectedIndex != -1) {
            selectedBooking = Integer.parseInt((String) bookingTable.getValueAt(selectedIndex, 0));
            Booking booking = ClientServices.getInstance().getBookingById(selectedBooking);
            if (booking != null) {
                if (booking.getDate().before(new Date())) {
                    JOptionPane.showMessageDialog(null, "You can't Extend over due booking!");
                    return;
                }

                licenceTf.setText(booking.getLicensePlate());
               /* startTime.setValue(booking.getStartTime());
                endTime.setValue(booking.getEndTime());*/
                jDateChooser1.setDate(booking.getDate());
                checkoutBtn.setText("Update");
                currentBooking = booking;
            } else {
                JOptionPane.showMessageDialog(null, "Failure: Booking is not exist!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "please Select A row");
            return;
        }
    }//GEN-LAST:event_updateBookingBtnActionPerformed\

    private void checkOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutBtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = bookingTable.getSelectedRow();
        int selectedBooking = 0;
        if (selectedIndex != -1) {
            selectedBooking = Integer.parseInt((String) bookingTable.getValueAt(selectedIndex, 0));
            Booking booking = ClientServices.getInstance().getBookingById(selectedBooking);
            if (booking != null) {
                if (booking.getEndDateTime().after(new Date())) {
                    JOptionPane.showMessageDialog(null, "You can't Checkout until your Parked time is completed");
                    return;
                }
            }

            new CheckoutDetails(booking, this).setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "please Select A row");
            return;
        }


    }//GEN-LAST:event_checkOutBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int selectedIndex = bookingTable.getSelectedRow();
        int selectedBooking = 0;
        if (selectedIndex != -1) {
            selectedBooking = Integer.parseInt((String) bookingTable.getValueAt(selectedIndex, 0));
            Booking booking = ClientServices.getInstance().getBookingById(selectedBooking);
            if (booking != null) {
                if (booking.getDate().before(new Date())) {
                    JOptionPane.showMessageDialog(null, "You can't cancel over due booking!");
                    return;
                }
            }
            boolean isCanceled = ClientServices.getInstance().cancenlBooking(selectedBooking);
            if (isCanceled) {
                JOptionPane.showMessageDialog(null, "Booking is Canceld");
                loadBookingTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failure: Booking can't be cancelled");
            }
        } else {
            JOptionPane.showMessageDialog(null, "please Select A row");
            return;
        }

    }

    private void extendBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int selectedIndex = bookingTable.getSelectedRow();
        int selectedBooking = 0;
        if (selectedIndex != -1) {
            selectedBooking = Integer.parseInt((String) bookingTable.getValueAt(selectedIndex, 0));
            Booking booking = ClientServices.getInstance().getBookingById(selectedBooking);
            if (booking != null) {
                if (booking.getDate().before(new Date())) {
                    JOptionPane.showMessageDialog(null, "You can't Extend over due booking!");
                    return;
                }
            }

            JFrame frame = new JFrame();
            Object result = JOptionPane.showInputDialog(frame, "Enter Extra Hours:");
            String hours = (String) result;
            int hrs = Integer.parseInt(hours);


            boolean isCanceled = ClientServices.getInstance().updateBooking(selectedBooking, hrs);


            if (isCanceled) {
                JOptionPane.showMessageDialog(null, "Booking is Extended");
                loadBookingTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failure: Booking can't be Extended");
            }
        } else {
            JOptionPane.showMessageDialog(null, "please Select A row");
            return;
        }

    }

    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        if (checkoutBtn.getText().equals("Update")
                && currentBooking != null) {

            ParkingLot lot = ClientServices.getInstance().getParkingLotByAddress((String) locationTf.getSelectedItem());
            String location = (String) locationTf.getSelectedItem();
            Date date = jDateChooser1.getDate();
            int startHour = (Integer) startTime.getSelectedIndex();
            int endHour = (Integer) endTime.getSelectedIndex();
            String plateNumber = licenceTf.getText();

            if (location.equals("") || date == null || startHour == endHour || plateNumber.equals("")) {
                JOptionPane.showMessageDialog(null, "All details are required!!!!");
                return;
            }

            if (startHour >= endHour) {
                JOptionPane.showMessageDialog(null, "Start and End Time should be valid!");
                return;
            }
            int selectedIndex = spaceTable.getSelectedRow();
            int selectedSlotID = 0;
            if (selectedIndex != -1)
                selectedSlotID = Integer.parseInt((String) spaceTable.getValueAt(selectedIndex, 0));
            else {
                JOptionPane.showMessageDialog(null, "please Select A row");
                return;
            }

            Booking newbooking = new Booking(currentBooking.getId(), date, lot.getLotID(), selectedSlotID, startHour, endHour, plateNumber, currentUser.getCredentials().getLogin());

            boolean isUpdate = ClientServices.getInstance().updateCompleteBooking(newbooking);
            if (isUpdate) {
                JOptionPane.showMessageDialog(null, "Booking is Updated Successfully");
                licenceTf.setText("");
                startTime.setSelectedIndex(0);
                endTime.setSelectedIndex(0);
                jDateChooser1.setDate(null);
                currentBooking = null;
                checkoutBtn.setText("Deposit!");
                loadBookingTable();
            } else {
                JOptionPane.showMessageDialog(null, "There is an Issue While updating");
                return;
            }


        } else {
            ParkingLot lot = ClientServices.getInstance().getParkingLotByAddress((String) locationTf.getSelectedItem());
            String location = (String) locationTf.getSelectedItem();
            Date date = jDateChooser1.getDate();
            int startHour = (Integer) startTime.getSelectedIndex();
            int endHour = (Integer) endTime.getSelectedIndex();
            String plateNumber = licenceTf.getText();

            if (location.equals("") || date == null || startHour == endHour || plateNumber.equals("")) {
                JOptionPane.showMessageDialog(null, "All details are required!!!!");
                return;
            }

            if (startHour >= endHour) {
                JOptionPane.showMessageDialog(null, "Start and End Time should be valid!");
                return;
            }
            int selectedIndex = spaceTable.getSelectedRow();
            int selectedSlotID = 0;
            if (selectedIndex != -1)
                selectedSlotID = Integer.parseInt((String) spaceTable.getValueAt(selectedIndex, 0));
            else {
                JOptionPane.showMessageDialog(null, "please Select A row");
                return;
            }


            System.out.println("-------------------------");
            System.out.println(lot.getLotID() + "---------" + selectedSlotID);
            String result = ClientServices.getInstance().getParkingSpaceById(lot.getLotID(), selectedSlotID);
            if (!result.equals("success")) {
                JOptionPane.showMessageDialog(null, result);
                return;
            }

            int id = 1;
            if (ClientServices.getInstance().getAllBookings().size() != 0)
                id = ClientServices.getInstance().getAllBookings().get(ClientServices.getInstance().getAllBookings().size() - 1).getId() + 1;
            Booking newbooking = new Booking(id, date, lot.getLotID(), selectedSlotID, startHour, endHour, plateNumber, currentUser.getCredentials().getLogin());

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    setVisible(false);
                    new CheckoutView(newbooking).setVisible(true);
                }
            });

        }
    }

    private void licenceTfActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int selectedIndex = bookingTable.getSelectedRow();
        int selectedBooking = 0;
        if (selectedIndex != -1) {
            selectedBooking = Integer.parseInt((String) bookingTable.getValueAt(selectedIndex, 0));
            Booking booking = ClientServices.getInstance().getBookingById(selectedBooking);
            if (booking != null) {

                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new ViewDetails(booking).setVisible(true);
                    }
                });
            }
        } else {
            JOptionPane.showMessageDialog(null, "please Select A row");
            return;
        }
    }

    public void loadSpaceTable(ParkingLot lot) {
        ((DefaultTableModel) spaceTable.getModel()).setRowCount(0);

        for (int j = 0; j < 100; j++) {
            ParkingSpace currentSpace = lot.getParkingSpaces().get(j);
            Integer currentSpaceID = currentSpace.getSpaceID();
            String currentSpaceIDString = currentSpaceID.toString();
            boolean hasBooking = currentSpace.hasBooking() && currentSpace.getStatus();
            String hasBookingString = "Yes";
            if (currentSpace.getBooking() != null) {
               hasBookingString = currentSpace.getBooking().getEmail() != null ? "No" : "Yes";
            }
            if (currentSpace.getStatus() == false) {
            	 hasBookingString = "No";
            }
            String location = lot.getLocation() + "-" + currentSpaceID;
            ((DefaultTableModel) spaceTable.getModel()).insertRow(spaceTable.getRowCount(), new String[]{currentSpaceIDString, location, hasBookingString});
        }
    }

    public void loadBookingTable() {
        ((DefaultTableModel) bookingTable.getModel()).setRowCount(0);

        List<Booking> bookings = ClientServices.getInstance().getAllUsersBookings(currentUser.getCredentials().getLogin());
        System.out.println(bookings);
        System.out.println(bookings.size());
        for (Booking booking : bookings) {
            ((DefaultTableModel) bookingTable.getModel()).insertRow(bookingTable.getRowCount(),
                    new String[]{booking.getId() + "",
                            booking.getSpaceId() + ""
                            , booking.getLicensePlate(),
                            booking.getDate().toString(),
                            booking.getTotalHours() + "",
                            booking.getTotalCost() + ""});
        }
    }

    // End of variables declaration
}
